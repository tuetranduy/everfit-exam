// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EverfitExam.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Meal Plan Templates")]
    public partial class MealPlanTemplatesFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "EverfitExam_MealPlanTemplateTest.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Meal Plan Templates", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 3
    #line hidden
#line 4
        await testRunner.GivenAsync("User go to login page", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 5
        await testRunner.WhenAsync("User enter valid credentials", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 6
        await testRunner.AndAsync("User select \"Library\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 7
        await testRunner.AndAsync("User goes to \"Meal Plan Templates\" screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create private meal Plan with all fields")]
        [NUnit.Framework.CategoryAttribute("library")]
        [NUnit.Framework.CategoryAttribute("mealplantemplates")]
        public async System.Threading.Tasks.Task CreatePrivateMealPlanWithAllFields()
        {
            string[] tagsOfScenario = new string[] {
                    "library",
                    "mealplantemplates"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create private meal Plan with all fields", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
    await this.FeatureBackgroundAsync();
#line hidden
#line 12
        await testRunner.GivenAsync("User click Create Meal Plan", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 13
        await testRunner.WhenAsync("User enter meal plan name", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 14
        await testRunner.AndAsync("User upload Cover Image", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
        await testRunner.AndAsync("User enter Number Of Weeks", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
        await testRunner.AndAsync("User choose Owner option", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
        await testRunner.AndAsync("User choose Share with org option", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
        await testRunner.AndAsync("User click Create button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
        await testRunner.ThenAsync("User is in Meal Plan details screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 20
        await testRunner.AndAsync("Meal Plan have \"Draft\" status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Update draft meal plan name")]
        [NUnit.Framework.CategoryAttribute("library")]
        [NUnit.Framework.CategoryAttribute("mealplantemplates")]
        public async System.Threading.Tasks.Task UpdateDraftMealPlanName()
        {
            string[] tagsOfScenario = new string[] {
                    "library",
                    "mealplantemplates"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Update draft meal plan name", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "CoverImage",
                            "MealPlanName",
                            "NumberOfWeeks",
                            "Owner",
                            "ShareWithOrg"});
                table1.AddRow(new string[] {
                            "TestData/testimg.jpg",
                            "ATE_MEALPLAN",
                            "2",
                            "6569b222973988001f31b804",
                            "0"});
#line 25
        await testRunner.GivenAsync("Existing meal plan with", ((string)(null)), table1, "Given ");
#line hidden
#line 28
        await testRunner.WhenAsync("User goes to Draft screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 29
        await testRunner.AndAsync("User goes to meal plan details", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
        await testRunner.AndAsync("User click Edit Info button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "MealPlanName"});
                table2.AddRow(new string[] {
                            "ATE_MEALPLAN _UPDATE"});
#line 31
        await testRunner.AndAsync("User update new name for meal plan", ((string)(null)), table2, "And ");
#line hidden
#line 34
        await testRunner.ThenAsync("Meal Plan name updated successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete draft meal plan")]
        [NUnit.Framework.CategoryAttribute("library")]
        [NUnit.Framework.CategoryAttribute("mealplantemplates")]
        public async System.Threading.Tasks.Task DeleteDraftMealPlan()
        {
            string[] tagsOfScenario = new string[] {
                    "library",
                    "mealplantemplates"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Delete draft meal plan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 3
    await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "CoverImage",
                            "MealPlanName",
                            "NumberOfWeeks",
                            "Owner",
                            "ShareWithOrg"});
                table3.AddRow(new string[] {
                            "TestData/testimg.jpg",
                            "ATE_MEALPLAN",
                            "2",
                            "6569b222973988001f31b804",
                            "0"});
#line 39
        await testRunner.GivenAsync("Existing meal plan with", ((string)(null)), table3, "Given ");
#line hidden
#line 42
        await testRunner.WhenAsync("User goes to Draft screen", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 43
        await testRunner.AndAsync("User click \"Remove\" in context menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
        await testRunner.AndAsync("User Confirm remove meal plan", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
